alterar o docker-compose incluindo a ferramenta influxdb

  influxdb:
    image: influxdb:1.8
    ports:
      - "8086:8086"
    environment:
      - INFLUXDB_DB=k6

docker run --rm   --network monitoring_stack_default   -v /home/gabriel/Documentos/GitHub/seminarios-docker-monitoramento/DIA05/k6-test/fastapi-docker.js:/scripts/teste.js   loadimpact/k6 run /scripts/teste.js   --out influxdb=http://influxdb:8086/k6


Explicação detalhada:
docker run: executa um novo contêiner.

--rm: remove o contêiner automaticamente após a execução (sem deixar lixo).

--network monitoring_stack_default: conecta o contêiner à rede Docker monitoring_stack_default (provavelmente criada por um docker-compose).

-v /home/gabriel/.../fastapi-docker.js:/scripts/teste.js: monta o arquivo de teste do host (fastapi-docker.js) dentro do contêiner, no caminho /scripts/teste.js.

loadimpact/k6: imagem Docker oficial do k6, uma ferramenta para testes de carga.

run /scripts/teste.js: diz ao k6 para executar o script /scripts/teste.js (o que foi montado).

--out influxdb=http://influxdb:8086/k6: envia os resultados do teste para um banco de dados InfluxDB acessível no endereço http://influxdb:8086/k6 (base de dados chamada k6), que deve estar acessível dentro da mesma rede monitoring_stack_default.



Scripts:

Temos 2 scripts .js no repo

fastapi-docker.js

Esse script testa se dois endpoints da sua aplicação FastAPI estão funcionando corretamente (retornando status 200) e executa esses testes em cada iteração do k6, com um intervalo de 5 segundos entre eles.

fastapi-exemplo-simples.js

Esse script é mais simples e testa apenas um endpoint da nossa aplicação funcionando corretamente (retornando status 200) e executa esses testes.

k6:

Por padrao roda uma vez só e com apenas um VU (Virtual User)


Teste com mais carga:

Nesse caso passamos um tempo e quantidade de usuarios simulados 

docker run --rm \
  --network monitoring_stack_default \
  -v /home/gabriel/Documentos/GitHub/seminarios-docker-monitoramento/DIA05/k6-test/fastapi-docker.js:/scripts/teste.js \
  loadimpact/k6 run /scripts/teste.js \
  --vus 10 --duration 2m \
  --out influxdb=http://influxdb:8086/k6

Explicação:
Parâmetros definidos:
--vus 10: 10 usuários virtuais simultâneos

--duration 2m: duração de 2 minutos (120 segundos)

sleep(5): cada VU dorme 5 segundos após cada execução


O que o script faz por iteração:
Faz 2 requisições:

1 para /docs

1 para /api/v1/usuarios/

Depois, espera 5 segundos


Grafana:

Criar datasource influxdb

importar dashboard id 2587